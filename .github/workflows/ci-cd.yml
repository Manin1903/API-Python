name: CI/CD Pipeline

on:
    push:
        branches:
            - master
            - dev

env:
    SSH_AUTH_SOCK: /tmp/ssh_agent.sock

jobs:
    test:
      name: Run Unit Test
      runs-on: ubuntu-latest
      steps: 
        - name: Checkout Repository
          uses: actions/checkout@v4
    
        - name: Setup Python
          uses: actions/setup-python@v5
          with:
            python-version: '3.13'
    
        - name: Install Requirements
          run: |
            pip install --upgrade pip
            pip install -r requirements.txt
            pip install coverage
    
        - name: Run Tests with Coverage
          run: |
            mkdir -p static  # Fix STATICFILES_DIRS warning
            coverage run --include='**/models.py,**/views.py,**/serializers.py' --omit='env/*,*/opt/*' manage.py test
            coverage report -m --fail-under=50  # Adjust or remove as needed

    build:
        name: Build & Publish Docker Image
        runs-on: ubuntu-latest
        needs: test
        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
            - name: check directory
              run: ls -al
            - name: Set Up Environment
              run: |
                if [ "${{ github.ref_name }}" == "dev" ]; then
                    echo "IMAGE_TAG=dev" >> $GITHUB_ENV
                elif [ "${{ github.ref_name }}" == "master" ]; then
                    echo "IMAGE_TAG=latest" >> $GITHUB_ENV
                fi
            - name: Docker login
              run: echo ${{ secrets.DOCKER_ACCESS_TOKEN }} | docker login -u ${{ secrets.REGISTRY_USER }} --password-stdin docker.io
            - name: Set Docker BuildKit
              run: export DOCKER_BUILDKIT=1
            - name: Build Docker Image
              run: |
                  docker build -t ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .
                  docker push ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

    # deploy:
    #     name: Deploy to GCP
    #     runs-on: ubuntu-latest
    #     needs: build
    #     steps:
    #         - name: Checkout Repository
    #           uses: actions/checkout@v4
    #         - name: Install SSH client
    #           run: sudo apt-get install openssh-client
    #         - name: Set Up Environment
    #           run: |
    #             if [ "${{ github.ref_name }}" == "dev" ]; then
    #                 echo "DJANGO_SETTINGS_MODULE=${{ secrets.STAGING_DJANGO_SETTINGS_MODULE }}" >> $GITHUB_E
    #                 echo "PORT=8003" >> $GITHUB_ENV
    #                 echo "CONTAINER_NAME=myapp-dev" >> $GITHUB_ENV
    #                 echo "IMAGE_TAG=dev" >> $GITHUB_ENV
    #             elif [ "${{ github.ref_name }}" == "main" ]; then
    #                 echo "DJANGO_SETTINGS_MODULE=${{ secrets.PROD_DJANGO_SETTINGS_MODULE }}" >> $GITHUB_ENV
    #                 echo "PORT=8000" >> $GITHUB_ENV
    #                 echo "CONTAINER_NAME=myapp" >> $GITHUB_ENV
    #                 echo "IMAGE_TAG=latest" >> $GITHUB_ENV
    #             fi

    #         - name: Setup SSH passphrase
    #           run: |
    #             ssh-agent -a $SSH_AUTH_SOCK > /dev/null
    #             echo 'echo ${{ secrets.GCE_SSH_PASSPHRASE }}' > ~/.ssh_askpass && chmod +x ~/.ssh_askpass
    #             echo "${{ secrets.GCE_SSH_KEY }}" | tr -d '\r' | DISPLAY=None SSH_ASKPASS=~/.ssh_askpass ssh-add - >/dev/null
    #         - name: Deploy to GCP
    #           uses: appleboy/ssh-action@v1.0.3
    #           with:
    #             host: ${{ secrets.GCE_IP }}
    #             username: ${{ secrets.GCE_USERNAME }}
    #             key: ${{ secrets.GCE_SSH_KEY }}
    #             passphrase: ${{ secrets.GCE_SSH_PASSPHRASE }}
    #             script: |
    #                 echo ${{ secrets.DOCKER_ACCESS_TOKEN }} | sudo docker login -u ${{ secrets.REGISTRY_USER }} --password-stdin docker.io
    #                 sudo docker container rm -f ${{ env.CONTAINER_NAME }} || true &&
    #                 sudo docker image rm -f ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:${{ env.IMAGE_TAG }} || true &&
    #                 sudo docker pull ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:${{ env.IMAGE_TAG }} || true &&
    #                 sudo docker run --name ${{ env.CONTAINER_NAME }} \
    #                     -d \
    #                     -p ${{ env.PORT }}:8000 \
    #                     -e DJANGO_SETTINGS_MODULE='${{ env.DJANGO_SETTINGS_MODULE }}' \
    #                     -e ALLOWED_HOST='${{ secrets.DJANGO_ALLOWED_HOSTS }}' \
    #                     -e SECRET_KEY='${{ secrets.DJANGO_SECRET_KEY }}' \
    #                     --network ${{ secrets.DOCKER_NETWORK }} \
    #                     ${{ secrets.REGISTRY_USER }}/${{ secrets.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
